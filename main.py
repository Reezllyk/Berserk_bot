import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

import keyboards as kb

from dotenv import load_dotenv
import os

from crypto import get_btc_price

load_dotenv()
bot = Bot(token=os.getenv('TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.startMenu)

@dp.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def backToMenu(message: Message):
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.startMenu)

@dp.message(F.text == 'üíµ –ö—É—Ä—Å')
async def course(message: Message):
    price = await get_btc_price()
    if price:
        await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: <b>${price}</b> üí∞")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ üò¢")

@dp.message(F.text == '‚òéÔ∏è –°–≤—è–∑—å')
async def connection(message: Message):
    await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç.', reply_markup=kb.urlsMenu)

@dp.message(F.text == 'üöπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def connection(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø <b>Berserk_bot</b>.ü§ñ –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ü–µ–Ω–∞—Ö –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º.", reply_markup=kb.subMenu)


@dp.message(F.text.in_(['‚û°Ô∏è –ú–µ–Ω—é', '–ú–µ–Ω—é']))
async def submenu(message:Message):
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.subMenu)


@dp.message()
async def echo(message: Message):
    await message.answer(message.text)



async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())